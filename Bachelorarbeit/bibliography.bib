@Article{Paulson1989,
author="Paulson, Lawrence C.",
title="The foundation of a generic theorem prover",
journal="Journal of Automated Reasoning",
year="1989",
volume="5",
number="3",
pages="363--397",
abstract="Isabelle [28, 30] is an interactive theorem prover that supports a variety of logics. It represents rules as propositions (not as functions) and builds proofs by combining rules. These operations constitute a meta-logic (or `logical framework') in which the object-logics are formalized. Isabelle is now based on higher-order logic-a precise and well-understood foundation.",
url="http://dx.doi.org/10.1007/BF00248324"
}

@book{Paulson1994,
  title = {Isabelle. A Generic Theorem Prover},
  publisher = {Springer},
  series = {LNCS},
  volume = {828},
  year = 1994,
  author = {Lawrence C. Paulson}
}

@article{Paulson1986,
title = "Natural deduction as higher-order resolution",
journal = "The Journal of Logic Programming",
volume = "3",
number = "3",
pages = "237 - 258",
year = "1986",
url = "http://www.sciencedirect.com/science/article/pii/0743106686900154",
author = "Lawrence C. Paulson"
}

@manual{implementation,
  title        = {The Isabelle/Isar Implementation},
  author       = {Makarius Wenzel},
  month        = 12,
  year         = 2016
}

@incollection{Dowek20011009,
title = "Chapter 16 - Higher-Order Unification and Matching ",
booktitle = "Handbook of Automated Reasoning ",
publisher = "North-Holland",
year = "2001",
pages = "1009 - 1062",
series = "Handbook of Automated Reasoning",
url = "//www.sciencedirect.com/science/article/pii/B9780444508133500187",
author = "Gilles Dowek"
}

@Inbook{Huet1975,
author="Huet, G{\'e}rard",
title="Unification in typed lambda calculus",
bookTitle="$\lambda$-Calculus and Computer Science Theory: Proceedings of the Symposium Held in Rome March 25--27, 1975",
year="1975",
publisher="Springer",
pages="192--212",
url="http://dx.doi.org/10.1007/BFb0029526"
}

@INPROCEEDINGS{Wimmer2016,
title = "Smashing Isabelle: Flex-Flex Pairs in 2016",
booktitle = {Isabelle Workshop},
year = "2016",
author = "Simon Wimmer"
}

@Article{Paulson1999,
  author = "Lawrence C. Paulson",
  title = "A Generic Tableau Prover and its Integration with Isabelle",
  abstract = "A generic tableau prover has been implemented and integrated with Isabelle (Paulson, 1994). Compared with classical first-order logic provers, it has numerous extensions that allow it to reason with any supplied set of tableau rules. It has a higher-order syntax in order to support user-defined binding operators, such as those of set theory. The unification algorithm is first-order instead of higher-order, but it includes modifications to handle bound variables. The proof, when found, is returned to Isabelle as a list of tactics. Because Isabelle verifies the proof, the prover can cut corners for efficiency's sake without compromising soundness. For example, the prover can use type information to guide the search without storing type information in full.",
  journal = "Journal of Universal Computer Science",
  year = "1999",
  volume = "5",
  number = "3",
  pages = "73--87"
  }

  @Article{Asperti2009,
author="Asperti, A.
and Ricciotti, W.
and Sacerdoti Coen, C.
and Tassi, E.",
title="A compact kernel for the calculus of inductive constructions",
journal="Sadhana",
year="2009",
volume="34",
number="1",
pages="71--144",
abstract="The paper describes the new kernel for the Calculus of Inductive Constructions (CIC) implemented inside the Matita Interactive Theorem Prover. The design of the new kernel has been completely revisited since the first release, resulting in a remarkably compact implementation of about 2300 lines of OCaml code. The work is meant for people interested in implementation aspects of Interactive Provers, and is not self contained. In particular, it requires good acquaintance with Type Theory and functional programming languages.",
url="http://dx.doi.org/10.1007/s12046-009-0003-3"
}

